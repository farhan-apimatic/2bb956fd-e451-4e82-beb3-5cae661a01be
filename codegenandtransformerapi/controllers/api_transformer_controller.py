# -*- coding: utf-8 -*-

"""
    codegenandtransformerapi.controllers.api_transformer_controller

    This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
"""

from .base_controller import BaseController
from ..api_helper import APIHelper
from ..configuration import Configuration
from ..http.auth.basic_auth import BasicAuth
from ..exceptions.validation_result_exception import ValidationResultException

class APITransformerController(BaseController):

    """A Controller to access Endpoints in the codegenandtransformerapi API."""


    def using_apikey(self,
                     format,
                     apikey):
        """Does a GET request to /transform.

        Convert an API from the user's account using the API's [Api
        Integration
        Key](https://docs.apimatic.io/getting-started/manage-apis/#view-api-int
        egration-key). The converted file is returned as the response.
        > Note: This endpoint does not require Basic Authentication.

        Args:
            format (FormatTransformer): The API format to convert to
            apikey (string): Apikey of an already uploaded API Description on
                APIMATIC

        Returns:
            binary: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _query_builder = Configuration.base_uri
        _query_builder += '/transform'
        _query_parameters = {
            'format': format,
            'apikey': apikey
        }
        _query_builder = APIHelper.append_url_with_query_parameters(_query_builder,
            _query_parameters, Configuration.array_serialization)
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare and execute request
        _request = self.http_client.get(_query_url)
        BasicAuth.apply(_request)
        _context = self.execute_request(_request, binary = True)

        # Endpoint and global error handling using HTTP status codes.
        if _context.response.status_code == 400:
            raise ValidationResultException('Bad Request', _context)
        self.validate_response(_context)

        # Return appropriate type
        return _context.response.raw_body

    def using_url(self,
                  format,
                  description_url):
        """Does a GET request to /transform.

        Download API description from the given URL and convert it to the
        given format. The API description format of the provided file will be
        detected automatically. The converted file is returned as the
        response.

        Args:
            format (FormatTransformer): The API format to convert to
            description_url (string): The URL where the API description will
                be downloaded from

        Returns:
            binary: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _query_builder = Configuration.base_uri
        _query_builder += '/transform'
        _query_parameters = {
            'format': format,
            'descriptionUrl': description_url
        }
        _query_builder = APIHelper.append_url_with_query_parameters(_query_builder,
            _query_parameters, Configuration.array_serialization)
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare and execute request
        _request = self.http_client.get(_query_url)
        BasicAuth.apply(_request)
        _context = self.execute_request(_request, binary = True)

        # Endpoint and global error handling using HTTP status codes.
        if _context.response.status_code == 400:
            raise ValidationResultException('Bad Request', _context)
        self.validate_response(_context)

        # Return appropriate type
        return _context.response.raw_body

    def using_file(self,
                   format,
                   file):
        """Does a POST request to /transform.

        Upload a file and convert it to the given format. The API description
        format of the uploaded file will be detected automatically. The
        converted file is returned as the response.

        Args:
            format (FormatTransformer): The API format to convert to
            file (string): The input file to convert

        Returns:
            binary: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _query_builder = Configuration.base_uri
        _query_builder += '/transform'
        _query_parameters = {
            'format': format
        }
        _query_builder = APIHelper.append_url_with_query_parameters(_query_builder,
            _query_parameters, Configuration.array_serialization)
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare files
        _files = {
            'file': file
        }

        # Prepare and execute request
        _request = self.http_client.post(_query_url, files=_files)
        BasicAuth.apply(_request)
        _context = self.execute_request(_request, binary = True)

        # Endpoint and global error handling using HTTP status codes.
        if _context.response.status_code == 400:
            raise ValidationResultException('Bad Request', _context)
        self.validate_response(_context)

        # Return appropriate type
        return _context.response.raw_body
